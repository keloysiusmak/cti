[
    {
        "data_sources": "WMI Objects", 
        "description": "Windows Management Instrumentation (WMI) can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may attempt to evade detection of this technique by compiling WMI scripts. [1] Examples of events that may be subscribed to are the wall clock time or the computer's uptime. [2] Several threat groups have reportedly used this technique to maintain persistence. [3]", 
        "detection": "Monitor WMI event subscription entries, comparing current WMI event subscriptions to known good subscriptions for each host. Tools such as Sysinternals Autoruns may also be used to detect WMI changes that could be attempts at persistence. [12]", 
        "examples": [
            [
                "adbupd", 
                "adbupd can use a WMI script to achieve persistence.[4]"
            ], 
            [
                "APT29", 
                "APT29 has used WMI event filters to establish persistence.[5]"
            ], 
            [
                "Leviathan", 
                "Leviathan has used WMI for persistence.[6]"
            ], 
            [
                "PoshC2", 
                "PoshC2 has the ability to persist on a system using WMI events.[7]"
            ], 
            [
                "POSHSPY", 
                "POSHSPY uses a WMI event subscription to establish persistence.[8]"
            ], 
            [
                "POWERTON", 
                "POWERTON can use WMI for persistence.[9]"
            ], 
            [
                "SeaDuke", 
                "SeaDuke uses an event filter in WMI code to execute a previously dropped executable shortly after system startup.[10]"
            ], 
            [
                "Turla", 
                "Turla has used WMI event filters and consumers to establish persistence.[11]"
            ]
        ], 
        "id": "T1084", 
        "mitigations": [
            [
                "Privileged Account Management", 
                "Prevent credential overlap across systems of administrator and privileged accounts.[10]"
            ], 
            [
                "User Account Management", 
                "By default, only administrators are allowed to connect remotely using WMI; restrict other users that are allowed to connect, or disallow all users from connecting remotely to WMI."
            ]
        ], 
        "permissions_required": "Administrator, SYSTEM", 
        "platform": "Windows", 
        "references": [
            "https://www.secureworks.com/blog/wmi-persistence", 
            "https://www.defcon.org/images/defcon-22/dc-22-presentations/Kazanciyan-Hastings/DEFCON-22-Ryan-Kazanciyan-Matt-Hastings-Investigating-Powershell-Attacks.pdf", 
            "https://www2.fireeye.com/rs/fireye/images/rpt-m-trends-2015.pdf", 
            "https://download.microsoft.com/download/2/2/5/225BFE3E-E1DE-4F5B-A77B-71200928D209/Platinum%20feature%20article%20-%20Targeted%20attacks%20in%20South%20and%20Southeast%20Asia%20April%202016.pdf", 
            "http://www.slideshare.net/MatthewDunwoody1/no-easy-breach-derby-con-2016", 
            "https://www.fireeye.com/blog/threat-research/2018/03/suspected-chinese-espionage-group-targeting-maritime-and-engineering-industries.html", 
            "https://github.com/nettitude/PoshC2", 
            "https://www.fireeye.com/blog/threat-research/2017/03/dissecting_one_ofap.html", 
            "https://www.fireeye.com/blog/threat-research/2018/12/overruled-containing-a-potentially-destructive-adversary.html", 
            "https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf", 
            "https://www.welivesecurity.com/2019/05/29/turla-powershell-usage/", 
            "https://technet.microsoft.com/en-us/sysinternals/bb963902"
        ], 
        "tactic": "Persistence", 
        "title": "Windows Management Instrumentation Event Subscription", 
        "version": "1.0"
    }, 
    {
        "data_sources": "File monitoring, Authentication logs, Netflow/Enclave netflow, Process monitoring, Process command-line parameters", 
        "description": "Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). [1] It may be called with the winrm command or by any number of programs such as PowerShell. [2]", 
        "detection": "Monitor use of WinRM within an environment by tracking service execution. If it is not normally used or is disabled, then this may be an indicator of suspicious behavior. Monitor processes created and actions taken by the WinRM process or a WinRM invoked script to correlate it with other related events.", 
        "examples": [
            [
                "Cobalt Strike", 
                "Cobalt Strike can use WinRM to execute a payload on a remote host.[3]"
            ], 
            [
                "Threat Group-3390", 
                "Threat Group-3390 has used WinRM to enable remote execution.[4]"
            ]
        ], 
        "id": "T1028", 
        "mitigations": [
            [
                "Disable or Remove Feature or Program", 
                "Disable the WinRM service."
            ], 
            [
                "Network Segmentation", 
                "If the service is necessary, lock down critical enclaves with separate WinRM infrastructure and follow WinRM best practices on use of host firewalls to restrict WinRM access to allow communication only to/from specific devices.[5]"
            ], 
            [
                "Privileged Account Management", 
                "If the service is necessary, lock down critical enclaves with separate WinRM accounts and permissions."
            ]
        ], 
        "permissions_required": "User, Administrator", 
        "platform": "Windows", 
        "references": [
            "http://msdn.microsoft.com/en-us/library/aa384426", 
            "https://www.slideshare.net/kieranjacobsen/lateral-movement-with-power-shell-2", 
            "https://cobaltstrike.com/downloads/csmanual38.pdf", 
            "https://www.secureworks.com/research/bronze-union", 
            "https://www.iad.gov/iad/library/reports/spotting-the-adversary-with-windows-event-log-monitoring.cfm"
        ], 
        "supports_remote": "Yes", 
        "system_requirements": "WinRM listener turned on and configured on remote system", 
        "tactic": "Execution, Lateral Movement", 
        "title": "Windows Remote Management", 
        "version": "1.0"
    }, 
    {
        "capec_id": "", 
        "contributors": "Praetorian", 
        "data_sources": "Windows Registry, File monitoring, Process monitoring", 
        "description": "Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in HKLM\\Software[Wow6432Node]Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ and HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ are used to manage additional helper programs and functionalities that support Winlogon. [1]", 
        "detection": "Monitor for changes to Registry entries associated with Winlogon that do not correlate with known software, patch cycles, etc. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current Winlogon helper values. [13]  New DLLs written to System32 that do not correlate with known good software or patching may also be suspicious.", 
        "examples": [
            [
                "Cannon", 
                "Cannon adds the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon to establish persistence.[2]"
            ], 
            [
                "Dipsind", 
                "A Dipsind variant registers as a Winlogon Event Notify DLL to establish persistence.[3]"
            ], 
            [
                "Gazer", 
                "Gazer can establish persistence by setting the value \"Shell\" with \"explorer.exe, %malware_pathfile%\" under the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon.[4]"
            ], 
            [
                "KeyBoy", 
                "KeyBoy issues the command reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" to achieve persistence.[5][6]"
            ], 
            [
                "Remexi", 
                "Remexi achieves persistence using Userinit by adding the Registry key HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit.[7]"
            ], 
            [
                "Tropic Trooper", 
                "Tropic Trooper creates the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell and sets the value to establish persistence.[8]"
            ], 
            [
                "Turla", 
                "Turla established persistence by adding a Shell value under the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion]Winlogon.[9]"
            ]
        ], 
        "id": "T1004", 
        "mitigations": [
            [
                "Execution Prevention", 
                "Identify and block potentially malicious software that may be executed through the Winlogon helper process by using whitelisting tools like AppLocker that are capable of auditing and/or blocking unknown DLLs.[10][11][12]"
            ], 
            [
                "User Account Management", 
                "Limit the privileges of user accounts so that only authorized administrators can perform Winlogon helper changes."
            ]
        ], 
        "permissions_required": "Administrator, SYSTEM", 
        "platform": "Windows", 
        "references": [
            "https://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order", 
            "https://researchcenter.paloaltonetworks.com/2018/11/unit42-sofacy-continues-global-attacks-wheels-new-cannon-trojan/", 
            "https://download.microsoft.com/download/2/2/5/225BFE3E-E1DE-4F5B-A77B-71200928D209/Platinum%20feature%20article%20-%20Targeted%20attacks%20in%20South%20and%20Southeast%20Asia%20April%202016.pdf", 
            "https://www.welivesecurity.com/wp-content/uploads/2017/08/eset-gazer.pdf", 
            "https://www.pwc.co.uk/issues/cyber-security-data-privacy/research/the-keyboys-are-back-in-town.html", 
            "https://citizenlab.ca/2016/11/parliament-keyboy/", 
            "https://securelist.com/chafer-used-remexi-malware/89538/", 
            "https://researchcenter.paloaltonetworks.com/2016/11/unit42-tropic-trooper-targets-taiwanese-government-and-fossil-fuel-provider-with-poison-ivy/", 
            "https://www.welivesecurity.com/wp-content/uploads/2018/01/ESET_Turla_Mosquito.pdf", 
            "http://www.sans.org/reading-room/whitepapers/application/application-whitelisting-panacea-propaganda-33599", 
            "http://blog.jpcert.or.jp/2016/01/windows-commands-abused-by-attackers.html", 
            "https://www.iad.gov/iad/library/ia-guidance/tech-briefs/application-whitelisting-using-microsoft-applocker.cfm", 
            "https://technet.microsoft.com/en-us/sysinternals/bb963902"
        ], 
        "tactic": "Persistence", 
        "title": "Winlogon Helper DLL", 
        "version": "1.0"
    }, 
    {
        "contributors": "Casey Smith; Praetorian", 
        "data_sources": "Process monitoring, Process command-line parameters, Process use of network, DLL monitoring", 
        "defense_bypassed": "Anti-virus, Application whitelisting, Digital Certificate Validation", 
        "description": "Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. [1]", 
        "detection": "Use process monitoring to monitor the execution and arguments of msxsl.exe and wmic.exe. Compare recent invocations of these utilities with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity (ex: URL command line arguments, creation of external network connections, loading of DLLs associated with scripting). [5] [8] Command arguments used before and after the script invocation may also be useful in determining the origin and purpose of the payload being loaded.", 
        "examples": [
            [
                "Astaroth", 
                "Astaroth executes embedded JScript or VBScript in an XSL stylesheet located on a remote domain.[6]"
            ], 
            [
                "Cobalt Group", 
                "Cobalt Group used msxsl.exe to bypass AppLocker and to invoke Jscript code from an XSL file.[7]"
            ]
        ], 
        "id": "T1220", 
        "mitigations": [
            [
                "Execution Prevention", 
                "If msxsl.exe is unnecessary, then block its execution to prevent abuse by adversaries."
            ]
        ], 
        "permissions_required": "User", 
        "platform": "Windows", 
        "references": [
            "https://docs.microsoft.com/dotnet/standard/data/xml/xslt-stylesheet-scripting-using-msxsl-script", 
            "https://www.microsoft.com/download/details.aspx?id=21714", 
            "https://pentestlab.blog/2017/07/06/applocker-bypass-msxsl/", 
            "https://reaqta.com/2018/03/spear-phishing-campaign-leveraging-msxsl/", 
            "https://subt0x11.blogspot.com/2018/04/wmicexe-whitelisting-bypass-hacking.html", 
            "https://www.cybereason.com/blog/information-stealing-malware-targeting-brazil-full-research", 
            "https://blog.talosintelligence.com/2018/07/multiple-cobalt-personality-disorder.html", 
            "https://twitter.com/dez_/status/986614411711442944"
        ], 
        "supports_remote": "No", 
        "system_requirements": "Microsoft Core XML Services (MSXML) or access to wmic.exe", 
        "tactic": "Defense Evasion, Execution", 
        "title": "XSL Script Processing", 
        "version": "1.0"
    }, 
    {
        "contributors": "Anastasios Pingios", 
        "data_sources": "File monitoring, Process monitoring", 
        "description": "On Linux and macOS systems, multiple methods are supported for creating pre-scheduled and periodic background jobs: cron, [1] at, [2] and launchd. [3] Unlike Scheduled Task on Windows systems, job scheduling on Linux-based systems cannot be done remotely unless used in conjunction within an established remote session, like secure shell (SSH).", 
        "detection": "Legitimate scheduled jobs may be created during installation of new software or through administration functions. Jobs scheduled with launchd and cron can be monitored from their respective utilities to list out detailed information about the jobs. Monitor process execution resulting from launchd and cron tasks to look for unusual or unknown applications and behavior.", 
        "examples": [
            [
                "Exaramel", 
                "Exaramel uses crontab for persistence.[8]"
            ], 
            [
                "Janicab", 
                "Janicab used a cron job for persistence on Mac devices.[4]"
            ], 
            [
                "SpeakUp", 
                "SpeakUp uses cron tasks to ensure persistence.[9]"
            ], 
            [
                "Xbash", 
                "Xbash can create a cronjob for persistence if it determines it is on a Linux system.[10]"
            ]
        ], 
        "id": "T1168", 
        "mitigations": [
            [
                "User Account Management", 
                "Limit privileges of user accounts and remediate Privilege Escalation vectors so only authorized users can create scheduled jobs."
            ]
        ], 
        "permissions_required": "Administrator, User, root", 
        "platform": "Linux, macOS", 
        "references": [
            "https://linux.die.net/man/5/crontab", 
            "https://linux.die.net/man/1/at", 
            "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/ScheduledJobs.html", 
            "http://www.thesafemac.com/new-signed-malware-called-janicab/", 
            "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf", 
            "https://www.rsaconference.com/writable/presentations/file_upload/ht-r03-malware-persistence-on-os-x-yosemite_final.pdf", 
            "https://blog.avast.com/2015/01/06/linux-ddos-trojan-hiding-itself-with-an-embedded-rootkit/", 
            "https://www.welivesecurity.com/2018/10/11/new-telebots-backdoor-linking-industroyer-notpetya/", 
            "https://research.checkpoint.com/speakup-a-new-undetected-backdoor-linux-trojan/", 
            "https://researchcenter.paloaltonetworks.com/2018/09/unit42-xbash-combines-botnet-ransomware-coinmining-worm-targets-linux-windows/"
        ], 
        "tactic": "Persistence, Execution", 
        "title": "Local Job Scheduling", 
        "version": "1.0"
    }
]